import Head from "next/head";
import Card from "../components/Card";
import Image from "next/image";
import Link from "next/link";
import ModalChangeLog from "../components/ModalChangeLog";
import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { useSession } from "next-auth/react";
import { Loading } from "@nextui-org/react";

export interface QuotesTypes {
  _id: string;
  author: string;
  content: string;
  tags: string[];
  deleteQuote: boolean;
  likesCount: number;
  count: number;
}

export default function Home({
  topQuotes,
  topAuthor,
  quotesOfTheDay,
}: {
  topQuotes: [];
  topAuthor: [];
  quotesOfTheDay: [];
}) {
  const { data: session, update, status }: any = useSession();
  const router = useRouter();
  const [quotes, setQuotes] = useState<QuotesTypes[]>([]);
  const [loading, setLoading] = useState<boolean>(false);

  const [conection, setConection] = useState<any>(null);
  useEffect(() => {
    //wait a session
    const fetchUser = async () => {
      if (session && conection === null) {
        const res = await fetch(
          `/api/auth/createquote?creatorId=${session.user._id}`
        );
        const data: any = await res.json();
        setConection(data[0].lastConexion);
      }
    };
    fetchUser();
  }, [session]);

  useEffect(() => {
    setLoading(true);
    if (conection) {
      const fetchConexion = async () => {
        const date = new Date();
        const response = await fetch(
          `/api/auth/users?id=${
            session?.user?._id
          }&lastconexion=${date.toLocaleString()}`
        );
        const result = await response.json();

        //obtain string befores to the / in conection, and obtain first position in array and convert in number
        const dateOld = Number(conection.split("/")[0]);
        //
        console.log(dateOld);

        if (
          dateOld < date.getDate() ||
          (dateOld === 30 && date.getDate() === 1) ||
          (dateOld === 31 && date.getDate() === 1)
        ) {
          const fetchConexion = async () => {
            const date = new Date();
            const response = await fetch(
              `/api/auth/users?id=${session?.user?._id}&quotesOfTheDay=true`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  quotesOfTheDay: quotesOfTheDay,
                }),
              }
            );
            const result = await response.json();
            setQuotes(quotesOfTheDay);
            setLoading(false);
          };
          fetchConexion();
        } else {
          const fetchUser = async () => {
            const res = await fetch(
              `/api/auth/createquote?creatorId=${session.user._id}`
            );
            const data: any = await res.json();

            if (data[0].quotesOfTheDay === undefined) {
              const response = await fetch(
                `/api/auth/users?id=${session?.user?._id}&quotesOfTheDay=true`,
                {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    quotesOfTheDay: quotesOfTheDay,
                  }),
                }
              );
              const result = await response.json();
              setQuotes(quotesOfTheDay);
              setLoading(false);
            } else {
              setQuotes(data[0].quotesOfTheDay);
              setLoading(false);
            }
          };
          fetchUser();
        }
      };
      fetchConexion();
    }
  }, [conection]);

  return (
    <>
      <Head>
        <title>YouReadIt?</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ModalChangeLog />
      <section
        style={{
          display: "flex",
          width: "95%",
          height: "95%",
          flexWrap: "wrap",
          justifyContent: "space-around",
          marginTop: "3rem",
          marginBottom: "3rem",
          marginLeft: "auto",
          marginRight: "auto",
        }}
      >
        <div
          style={{
            width: "380px",
            height: "380px",
            borderRadius: "20px",
            backgroundColor: "rgba(16,16,16)",
            border: "1px white solid",
            marginBottom: "1rem",
          }}
        >
          <h2
            style={{
              paddingTop: "1rem",
              display: "flex",
              justifyContent: "center",
              marginBottom: "8rem",
            }}
          >
            Most Liked Quotes
          </h2>
          <div
            style={{
              height: "0%",
              paddingTop: "1rem",
              display: "flex",
              justifyContent: "center",
            }}
          >
            <div style={{ height: "0%" }}>
              {topQuotes.map((quote: QuotesTypes) => (
                <div key={quote._id} className="carousel__item">
                  <Card quotes={quote} deleteQuote={false} />
                </div>
              ))}
            </div>
          </div>
        </div>
        <div
          style={{
            width: "380px",
            height: "380px",
            borderRadius: "20px",
            backgroundColor: "rgba(16,16,16)",
            border: "1px white solid",
          }}
        >
          <h2
            style={{
              paddingTop: "1rem",
              display: "flex",
              justifyContent: "center",
              marginBottom: "1rem",
            }}
          >
            Top Authors
          </h2>
          <div
            style={{
              paddingTop: "1rem",
              display: "flex",
              justifyContent: "center",
            }}
          >
            <div style={{ width: "80%" }}>
              {topAuthor.map((quote: QuotesTypes) => (
                <div key={quote._id}>
                  <Link
                    style={{ color: "white" }}
                    href={`/category/author/${quote._id}`}
                  >
                    <h3
                      style={{
                        display: "flex",
                        justifyContent: "space-evenly",
                      }}
                    >
                      {quote._id}
                      <div>
                        {quote.count}
                        <Image
                          src="/icons/dislike.svg"
                          width={25}
                          height={20}
                          alt="icon heart"
                        />
                      </div>
                    </h3>
                  </Link>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>{" "}
      {session && (
        <>
          {" "}
          <h1
            style={{
              display: "flex",
              justifyContent: "center",
              marginBottom: "3rem",
            }}
          >
            Quotes Of the Day
          </h1>
          <div
            style={{
              display: "flex",
              justifyContent: "center",
              marginTop: "20px",
            }}
          >
            <div
              style={{
                display: "flex",
                justifyContent: "center",
                flexWrap: "wrap",
                width: "80%",
                marginBottom: "2rem",
                gap: "1rem",
              }}
            >
              {quotes && !loading ? (
                quotes.map((quotes: any) => {
                  return (
                    <Card
                      key={quotes._id}
                      quotes={quotes}
                      deleteQuote={false}
                    />
                  );
                })
              ) : (
                <Loading color={"secondary"} size="xl" />
              )}
            </div>
          </div>
        </>
      )}
    </>
  );
}

export async function getServerSideProps() {
  try {
    const res = await fetch(
      `${process.env.NEXTAUTH_URL}/api/auth/quotes?limit=9&top=1`
    );
    const resauthor = await fetch(
      `${process.env.NEXTAUTH_URL}/api/auth/quotes?limit=5&topAuthor=1`
    );
    const resquotesOfTheDay = await fetch(
      `${process.env.NEXTAUTH_URL}/api/auth/quotes?limit=8`
    );
    const topAuthor = await resauthor.json();
    const topQuotes = await res.json();
    const quotesOfTheDay = await resquotesOfTheDay.json();
    return {
      props: {
        topQuotes,
        topAuthor,
        quotesOfTheDay,
      },
    };
  } catch (error) {
    console.log(error);
  }
}
